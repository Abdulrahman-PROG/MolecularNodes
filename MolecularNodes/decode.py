import numpy as np


def _byte_array(bytes, enc):
    type = int(enc['type'] - 1)
    types = (
        np.int8, np.int16, np.int32, 
        np.uint8, np.uint16, np.uint32, 
        np.float32, np.float64
        )
    return np.frombuffer(bytes, dtype = types[type])

def _fixed_point(data, enc):
    factor = enc['factor']
    # srcType = int(enc['srcType'] - 1)
    # types = (np.float32, np.float64) # there were some with 33? don't need performance so bare float will be fine
    numbers = data / factor
    return numbers.astype(float)

def _interval_quant(data, enc):
    min = enc['min'] 
    max = enc['max'] 
    numsteps = enc['numsteps'] 
    srcType = enc['srcType']
    
    types = (np.float32, np.float64)
    interval = max - min / numsteps
    nums = data * interval + min
    return np.astype(nums, dtype = types[srcType])

def _run_length(data, enc):
    srcSize = enc['srcSize']
    n_entries = int(len(data) / 2)
    numbers = data.reshape((n_entries, 2))
    return np.repeat(numbers[:, 0], numbers[:, 1])

def _delta(array, enc):
    origin = enc['origin']
    return np.cumsum(array) + origin

def _integer_packing(data, enc):
    # TODO currently not looking at signs - don't know how to handle this
    byteCount = int(enc['byteCount'] - 1)
    srcSize = enc['srcSize'] 
    isUnsigned = enc['isUnsigned'] 
    dtype = (np.int8, np.int16)[byteCount]
    
    return data.astype(np.int32)

def _sub_from_string(string, offsets):
    lower = 0
    substrings = []
    for upper in offsets:
        substrings.append(string[lower:upper])
        lower = upper
    return np.array(substrings)

def _decode_numeric(arr, encodings):
    for enc in reversed(encodings):
        decoder = decoder_numeric[enc['kind']]
        arr = decoder(arr, enc)
    return arr

def _string_array(data, enc):
    dataEncoding = enc['dataEncoding']
    stringData = enc['stringData']
    offsetEncoding = enc['offsetEncoding']
    offsets = enc['offsets']
    
    offsets = _decode_numeric(offsets, offsetEncoding) 
    idxs   = _decode_numeric(data, dataEncoding)
    substrings = _sub_from_string(stringData, offsets)
    return substrings[idxs]



decoder_numeric = {
    "ByteArray" : _byte_array,
    "FixedPoint" : _fixed_point,
    "IntervalQuantization" :  _interval_quant,
    "RunLength" :  _run_length,
    "Delta" :_delta,
    "IntegerPacking" :  _integer_packing
}

offsets = {
    'offsetEncoding':[
    {'kind': 'Delta', 'origin': 0, 'srcType': 3},
       {'kind': 'RunLength', 'srcType': 3, 'srcSize': 29},
       {'kind': 'IntegerPacking',
        'byteCount': 1,
        'isUnsigned': True,
        'srcSize': 14},
       {'kind': 'ByteArray', 'type': 4}],
'offsets': b'\x00\x01\x03\x08\x02\x08\x01\x01\x03\x02\x02\x08\x01\x01'}


dat = {'name': 'Cartn_x',
   'data': {'encoding': [{'kind': 'FixedPoint', 'factor': 1000, 'srcType': 33},
     {'kind': 'Delta', 'origin': 18935, 'srcType': 3},
     {'kind': 'IntegerPacking',
      'byteCount': 2,
      'isUnsigned': False,
      'srcSize': 566},
     {'kind': 'ByteArray', 'type': 2}],
    'data': b'\x00\x00\xc3\x00?\x03\xa7\xfd,\x03\x9a\x04\x9e\xf6\x1b\x01w\xfb\x9a\x00p\x04W\xf76\xfb\xbf\xfb{\x03d\x04\xbe\x15g\x04N\xf9\xfa\x03\xbf\x02\xcf\xff\xeb\xfa\xdc\x05\x06\x04n\xf6\xd8\xfd4\xfa9\xfd\xd9\xfa\x84\xffe\xfbs\xfb\xb2\x05\xd5\x04J\x00\x05\x04\t\xff\x8e\x16\xa2\x05e\xf8\xd5\xfeD\x01\xdb\xfb\r\xfb\x90\x04\xb9\x02q\xf7t\xfd\xc6\xfb\xf9\xfa \xff\x12\xfd\x1a\x01\x1c\xfc\x01\t\xf3\x03\x80\x0e\x93\x04D\xfb\x03\xfb\'\xff\xd7\xfa\xf0\xfb\x8f\x03,\xfc\xfd\x01\xcb\xfbe\xfe\xc8\x02@\xfdX\xfbo\xfbI\xff\xbc\xfc\'\x00\x8b\xfb\xbd\x08\xf8\x03\xe0\x08\xf8\x02\xe9\xfe\x15\xf8\xe5\xfc\xc1\xfa\xaa\x00\xc9\xfc\x17\xfb\xa6\x04\x9b\xff\x1c\x02\xf3\x04\xcd\x00Z\xfbE\xfe/\x03\xe1\xf7\xec\xfc\x1d\x01\x07\x05\xa4\xf8\xba\xfc\x97\x06\xd4\xf8\xcb\xfbM\xfd\x11\x049\xf9~\xfa\xb9\x08\xcb\x01\xc3\x04\xad\x04\xa6\x03\x87\xfd\xc9\x01\x08\x05\x8e\xf7"\xfb\xe1\xfd\x8a\x03U\xec{\xfa\x8c\x07\x97\xfe\xb4\xfe\xff\x00e\x05\xde\xf7F\xfb\xe9\x08X\x04a\x05!\x03I\xfe\xc8\x06\x02\x02\xad\x04\xff\xf7\xe8\x01\xf4\xf8?\xe8\xb1\xfa\x99\x05t\x02<\x00Q\x03\xa9\x04\x16\xf9=\xfe\n\x06\xc7\x04?\x04\xef\x04\xee\x00\x02\x03&\xff\xd6\x03\x0f\xf7\xcc\xfe4\xfdR\xf0\x8d\xfcj\x01|\x07\xc6\x02\xed\x04\xe5\x02g\xfc\xf1\x02\xa8\xfe[\x04\x1b\x01\n\x05m\x03\xb7\xfd;\xfc@\x01\x86\xf9\xd0\xfeD\xfe\xb9\x01\xb8\xf8\x12\t\x94\x05N\x02V\xff%\xfe\xd8\x03\x97\xf8\xf7\x03\xe5\xfd\x06\xfb\xb5\xff\xfd\x04.\x02\xcd\xfd|\x07\x01\x038\x05\xc4\xf8\xd2\xfaS\x04!\x00r\xfcR\t\xeb\x03\xb3\x03\xf5\xfc\xdb\x05v\x05R\xf7\xfa\xfe`\xfb\x82\x00b\x04g\xf7H\xfb\xaf\xfb\xaa\x03b\x04\xe5\x16]\x05k\xf8\x1b\x02\'\x03\x97\xfe\x8a\xfa#\x06(\x04n\xf6\xc6\xfd@\xfa\xc2\xfc\xf1\xfa\x14\x00\xc1\xfbF\xfb{\x06\x0c\x05\xd9\x00"\x03o\xfe\xf6\xdf\x1a\x03\xb6\x05\xae\x01\xd7\xff\xa6\x04\xf1\xfb\x82\x02\xbf\xfe\xd8\x03\x8e\x049\xfa\x0e\xfb\xe6\xfe\t\xfdF\x01!\t@\x00\x02\xfcg\t\x19\x04\xf5\x03\xd3\xfdy\x03o\x05\x95\xf8y\x00\x02\xfc\xd2\xfaJ\xfd\x99\x03P\xff\xf2\xfb\xb5\x08\xc3\x041\x04m\xfc\x82\xfb\xe3\x0c\xa3\x04B\xf7\xfa\x05\xee\x03\xe5\xff\xc0\xfa}\x06~\x05\xa5\xf71\xfc\x88\xfa\x82\xfd\x8f\x02_\xf8_\xfd\xcd\xfa\xa7\x07A\x05\xa3\x16p\x05`\xf72\x03g\x03J\xfef\xfa\x04\x07\xeb\x01\x14\xf9\xe1\xfb\x1c\xfbj\xff\xfd\xfaX\xfd\x84\xfan\xfcv\x02~\x03(\xfe\xf2\x06D\x01$\x16B\x04\x86\xfc\t\xfa\x97\xfe\xa5\xfb\\\xfb\x9a\x05\x99\xfd\x14\x00\x19\xfb^\xfe\x00\x03#\xfd\x08\xfb\x0f\xfb\x7f\xff:\xfcs\x00O\x04C\x04\xc4\x0b\xf9\xff\x85\x04\x03\xf6W\xfbp\xfbM\xff\xf5\x00E\xfb\xc6\x05\xd9\xfc\x1f\x02\x1b\x05\x80\x00\x07\xfb\xd9\xfd\x00\x03\xd2\xf7\x0f\xfd\x7f\x01D\x05\x05\xfd\xd4\xfc\x0c\x08U\xf7-\xfb\xb3\xfd\xbe\x03\x1c\xfb|\xfat\x08\x9f\x00\x9f\x04Y\xff\x95\xfb\xc0\x08\xf0\x04\xac\x03\xf1\xfc]\x05;\xf6-\xeb\xa8\xfa\x06\t\xdc\xfb\xcd\xfcO\x00D\x05=\xf9\xcf\xfbS\t\\\x02\xbe\x05U\x02^\xfd\xf5\x07\x0e\x03\xc7\x04\xc5\xf8\x15\x03~\xf7a\xe9o\xfa\xa5\x06\x1b\x02\xb2\xff\x01\x03b\x05P\xf9&\xfd\'\x08\xd8\x03\xc5\x04\xb6\x04\x1a\x007\x04\xb1\xffe\x04\xd5\xf6\x87\xfb\xb4\xed\x9e\xfbP\x03\xfc\x05\xc1\x01\xb6\x04/\x046\xfb5\x03\xaf\xfe\xd5\x04c\x02\xce\xfdt\x03\x7f\x04\x12\x05y\x01\t\x02\x0b\xff\x13\x045\xf7o\xfc\x9f\xf2:\xfd\x9f\xffY\x08q\x03\x93\x05\xa9\x00\x9d\x00\x84\x03c\xfe\x80\x01X\xff\x1f\x04"\x04Z\xfbo\xfb\x81\xff0\xfc\x8c\x00\xbb\x06\xcd\x002\xfb`\t\xba\x04\xc5\x03\x14\xfe\x02\x02\xec\x02\xa3\xff\x9f\xfd\xa8\xfb\xf6\xfa\x17\xfd]\x03\x1f\xff\xea\xfb\x9f\x08\xcf\x04\x1b\x04\xa6\xfc\xa1\xfb\xc9\tg\xdd\x11\x1d\xcd\xdev\xfc\x8e!\xef*\x02\xbd8\xf7\xde\x1c\xd6\x15\x9f\xc52\x1b\r3\xa3\xd1E\x0bD\xd1G\x03\x17\x15>\xfc\xa8\nn\xe0\xa9+d\x06\xe5\x05\xdd\xbd\x961^\xf3\xa9\x11\xbb\x1e\t\xd22\x11\xb7\xdbH\'h\xe6A\x00\xc6\x1eH\xe9v\xee\xbe%T\x18\x9c\xb8\xfe\x05t\x04\xac\xf6c\x15\x82\xfd\x8f\xf7\x8b\x19g\xd0\xb6\xfdj\x08.\x05\xc3)\x95\x1f\xa6\xc3\xfe\xf9\x8e\xf0\x862:\x10\x05\x07\xdd\xbfQ\x18\x18\x13\xa2\xe6\x97\t&\x05\xef\xf6\xa2\xee/=\x82\xa7\xb7B\x1a\x00J\xf6X$0\xbe\xf3\x11\xe0\xec_)\xf1\xfa'},
   'mask': None}


dat = {
    'name': 'auth_atom_id',
    'data': {
        'encoding': [
            {
                'kind': 'StringArray',
                'dataEncoding': [
                    {'kind': 'Delta', 'origin': 0, 'srcType': 3},
                    {'kind': 'RunLength', 'srcType': 3, 'srcSize': 566},
                    {'kind': 'IntegerPacking', 'byteCount': 1, 'isUnsigned': False, 'srcSize': 412},
                    {'kind': 'ByteArray', 'type': 1}
                ],
                'stringData': "O5'C5'C4'O4'C3'O3'C2'C1'N1C2O2N3C4N4C5C6POP1OP2N9C8N7O6N2N6O4C7O",
                'offsetEncoding': [
                    {'kind': 'Delta', 'origin': 0, 'srcType': 3},
                    {'kind': 'RunLength', 'srcType': 3, 'srcSize': 29},
                    {'kind': 'IntegerPacking', 'byteCount': 1, 'isUnsigned': True, 'srcSize': 14},
                    {'kind': 'ByteArray', 'type': 4}
                ],
                'offsets': b'\x00\x01\x03\x08\x02\x08\x01\x01\x03\x02\x02\x08\x01\x01'
            }
        ],
        'data': b'\x00\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\xf4\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x0f\x01\x00O'
    },
    'mask': None
}

test_string = {
        'encoding': [
            {
                'kind': 'StringArray',
                'dataEncoding': [
                    {'kind': 'Delta', 'origin': 0, 'srcType': 3},
                    {'kind': 'RunLength', 'srcType': 3, 'srcSize': 566},
                    {'kind': 'IntegerPacking', 'byteCount': 1, 'isUnsigned': False, 'srcSize': 412},
                    {'kind': 'ByteArray', 'type': 1}
                ],
                'stringData': "O5'C5'C4'O4'C3'O3'C2'C1'N1C2O2N3C4N4C5C6POP1OP2N9C8N7O6N2N6O4C7O",
                'offsetEncoding': [
                    {'kind': 'Delta', 'origin': 0, 'srcType': 3},
                    {'kind': 'RunLength', 'srcType': 3, 'srcSize': 29},
                    {'kind': 'IntegerPacking', 'byteCount': 1, 'isUnsigned': True, 'srcSize': 14},
                    {'kind': 'ByteArray', 'type': 4}
                ],
                'offsets': b'\x00\x01\x03\x08\x02\x08\x01\x01\x03\x02\x02\x08\x01\x01'
            }
        ],
        'data': b'\x00\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\xf4\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\t\x01\xf0\x01\x01\x01\x02\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x0c\r\x01\xf5\x01\x0c\x01\xf5\x01\x01\x03\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x04\x01\x01\x02\xee\x01\x01\x12\xee\x01\x01\x07\x0c\x01\x01\x02\xf9\x01\x01\x01\x07\x01\xf2\x01\x01\x01\x0e\x01\xf4\x01\x01\x01\x0f\x01\x00O'
    }




print(
    _string_array(test_string['data'], test_string['encoding'][0])
)

decoder_all = decoder_numeric['stringArray'] = _string_array

def decode(arr, enc):
    if enc['type'] == 'stringArray':
        return _string_array(arr, enc[0])
    else:
        return _decode_numeric(arr, enc)

def decode_data(column):
    data = column['data']
    arr = data['data']
    
    mask = column.get('mask')
    
    array = decode(arr, data['encoding'])
    if mask:
        arr_mask = mask['data']
        arr_mask = _decode_numeric(arr_mask, mask['encoding'])
        return array[arr_mask]
    return array

# print(
#     # _string_array(test_string['data'], test_string['encoding'][0])
#     decode_data(dat)
# )

# dec = decode_data(dat)
# # dec = _decode_offsets(offsets)
# print(dec)
# print(len(dec))
